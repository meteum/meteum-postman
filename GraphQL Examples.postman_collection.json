{
	"info": {
		"_postman_id": "04ede69d-12e2-4c49-adc8-12f510a19ff5",
		"name": "GraphQL Examples",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24475012",
		"_collection_link": "https://www.postman.com/meteum/workspace/api/collection/24475012-04ede69d-12e2-4c49-adc8-12f510a19ff5?action=share&creator=24475012&source=collection_link"
	},
	"item": [
		{
			"name": "Weather for Now",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status test\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response must be valid data\", function () {",
							"    pm.response.to.have.jsonBody(\"data\");",
							"    pm.response.to.not.have.jsonBody(\"errors\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Meteum-API-Key",
						"value": "{{apikey}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query WeatherByPoint($lat: Float!, $lon: Float!) {\n  weatherByPoint(request: {lat: $lat, lon: $lon}) {\n    now {\n      temperature\n      condition\n      icon(format: PNG_128)\n      precType\n    }\n  }\n}\n",
						"variables": "{\n    \"lat\": 52.37125,\n    \"lon\": 4.89388\n}"
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Hourly forecast",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status test\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response must be valid data\", function () {",
							"    pm.response.to.have.jsonBody(\"data\");",
							"    pm.response.to.not.have.jsonBody(\"errors\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Meteum-API-Key",
						"value": "{{apikey}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query WeatherByPoint($lat: Float!, $lon: Float!) {\n  weatherByPoint(request: { lat: $lat, lon: $lon }) {\n    forecast {\n      hours(first: 4) {  # first 4 hours only\n        edges {\n          node {\n            temperature\n            time\n          }\n        }\n      }\n    }\n  }\n}\n",
						"variables": "{\n    \"lat\": 52.37125,\n    \"lon\": 4.89388\n}"
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Day parts forecast",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status test\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response must be valid data\", function () {",
							"    pm.response.to.have.jsonBody(\"data\");",
							"    pm.response.to.not.have.jsonBody(\"errors\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Meteum-API-Key",
						"value": "{{apikey}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query WeatherByPoint($lat: Float!, $lon: Float!) {\n  weatherByPoint(request: { lat: $lat, lon: $lon }) {\n    forecast {\n      days(limit: 2) {\n        time\n        sunrise\n        sunset\n        parts {\n          morning {\n            avgTemperature\n          }\n          day {\n            avgTemperature\n          }\n          evening {\n            avgTemperature\n          }\n          night {\n            avgTemperature\n          }\n        }\n      }\n    }\n  }\n}\n",
						"variables": "{\n    \"lat\": 52.37125,\n    \"lon\": 4.89388\n}"
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Forecast at altitude",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status test\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response must be valid data\", function () {",
							"    pm.response.to.have.jsonBody(\"data\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Meteum-API-Key",
						"value": "{{apikey}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query WeatherByPoint($lat: Float!, $lon: Float!) {\n  weatherByPoint(request: { lat: $lat, lon: $lon }) {\n    forecast {\n      days(limit: 1) {\n        hours {\n          temperature\n          time\n          humidity\n          windSpeed\n          windDirection\n          windSpeedOnHeight(height: 100) {\n            windSpeed\n            height\n          }\n          temperatureOnHeight(height: 100) {\n            temperature\n            height\n          }\n          windDirectionOnHeight(height: 100) {\n            windDirection\n            height\n          }\n          windAngleOnHeight(height: 100) {\n            windAngle\n            height\n          }\n        }\n      }\n    }\n  }\n}\n",
						"variables": "{\n    \"lat\": 52.37125,\n    \"lon\": 4.89388\n}"
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Multiple points",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status test\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response must be valid data\", function () {",
							"    pm.response.to.have.jsonBody(\"data\");",
							"    pm.response.to.not.have.jsonBody(\"errors\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Meteum-API-Key",
						"value": "{{apikey}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "{\n  London: weatherByPoint(request: { lat: 51.50730, lon: -0.12769 }) {\n    ... WeatherData\n  }\n  Warsaw: weatherByPoint(request: { lat: 52.23209, lon: 21.00714 }) {\n    ... WeatherData\n  }\n  Berlin: weatherByPoint(request: { lat: 52.51865, lon: 13.37471 }) {\n    ... WeatherData\n  }\n}\n\nfragment WeatherData on Weather {\n  forecast {\n    days(limit: 3) {\n      parts {\n        day {\n          cloudiness\n          humidity\n          avgTemperature\n          prec\n          precType\n          precStrength\n          windSpeed\n          windDirection\n        }\n        night {\n          cloudiness\n          humidity\n          avgTemperature\n          prec\n          precType\n          precStrength\n          windSpeed\n          windDirection\n        }\n      }\n    }\n  }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Climate data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status test\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response must be valid data\", function () {",
							"    pm.response.to.have.jsonBody(\"data\");",
							"    pm.response.to.not.have.jsonBody(\"errors\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Meteum-API-Key",
						"value": "{{apikey}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query WeatherByPoint($lat: Float!, $lon: Float!) {\n  weatherByPoint(request: { lat: $lat, lon: $lon }) {\n    climate {\n      days {\n        maxDayTemperature\n      }\n    }\n  }\n}\n",
						"variables": "{\n    \"lat\": 52.37125,\n    \"lon\": 4.89388\n}"
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Current data from stations",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status test\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response must be valid data\", function () {",
							"    pm.response.to.have.jsonBody(\"data\");",
							"    pm.response.to.not.have.jsonBody(\"errors\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "in",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "X-Meteum-API-Key",
						"value": "{{apikey}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "{\n  stations(\n      maxLat: 53.51865768, minLat: 51.51865768, \n      minLon: 12.37471867, maxLon: 14.37471867, \n      language: EN\n  ) {\n    id\n    name\n    time\n    temperature\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "History data from stations",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status test\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response must be valid data\", function () {",
							"    pm.response.to.have.jsonBody(\"data\");",
							"    pm.response.to.not.have.jsonBody(\"errors\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "in",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "X-Meteum-API-Key",
						"value": "{{apikey}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "{\n  stationsByTimeRange(\n      request: {lat: 52.718706,  lon: 41.453126 },\n      timeRange: {from: \"1662036585\", to: \"1662209385\"}\n  ) {\n    id\n    time\n    cloudiness\n    precType\n    precStrength\n    temperature\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		}
	]
}